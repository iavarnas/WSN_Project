import numpy as np
import matplotlib.pyplot as plt
import time


# Function to perform FFT and return dominant frequency
def get_dominant_frequency(data, sampling_rate):
    fft_values = np.fft.fft(data)
    frequencies = np.fft.fftfreq(len(data), 1 / sampling_rate)
    # Discard negative frequencies
    positive_freq_mask = frequencies > 0
    positive_frequencies = frequencies[positive_freq_mask]
    positive_fft_values = fft_values[positive_freq_mask]
    # Find index of maximum FFT value
    max_index = np.argmax(np.abs(positive_fft_values))
    # Get dominant frequency
    dominant_frequency = positive_frequencies[max_index]
    return int(dominant_frequency), positive_frequencies, positive_fft_values


# Set up parameters
sampling_rate = 50  # Sampling frequency of 50 Hz
max_buffer_size = 1024  # Maximum buffer size
plot_window = 100  # Window size for plotting in seconds

# Initialize empty buffer
buffer = []
time_axis = []

# Initialize plots
fig, axs = plt.subplots(3, 1)



# Main loop
while True:
    # Simulating data acquisition
    new_data = np.random.randint(0, 7001)  # Generate random data, replace this with Arduino reading
         # Simulating sampling rate
    time.sleep(1 / sampling_rate)
    # Append new value to buffer
    buffer.append(new_data)
    time_axis.append(time.time())  # Append timestamp to time axis

    # Ensure buffer does not exceed max size
    if len(buffer) > max_buffer_size:
        buffer.pop(0)  # Remove oldest value if buffer exceeds max size
        time_axis.pop(0)  # Remove oldest timestamp

    # Check if buffer has enough data for FFT
    if len(buffer) >= max_buffer_size:
        # Perform FFT and get dominant frequency
        dominant_frequency, frequencies, fft_values = get_dominant_frequency(buffer, sampling_rate)
        print("dominant frequency=", dominant_frequency)
        print("data",new_data)
        # Plot frequency spectrum
        axs[0].cla()  # Clear previous plot
        axs[0].plot(frequencies, np.abs(fft_values))
        axs[0].set_title('Frequency Spectrum')
        axs[0].set_xlabel('Frequency (Hz)')
        axs[0].set_ylabel('Amplitude')

        # Plot time domain values
        axs[1].cla()  # Clear previous plot
        axs[1].plot(time_axis, buffer)
        axs[1].set_title('Time Domain Values')
        axs[1].set_xlabel('Time (s)')
        axs[1].set_ylabel('Value')

        # Plot dominant frequency
        axs[2].cla()  # Clear previous plot
        axs[2].text(0.5, 0.5, f"Dominant Frequency: {dominant_frequency} Hz", ha='center', fontsize=12)
        axs[2].axis('off')

        # Update plot
        plt.tight_layout() #για να αλλάζει δυναμικα τα διάγραμμα
        plt.pause(1) #ανα πόσο θα σταματουν τα διαγράμματα




