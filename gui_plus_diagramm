import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import psutil
import time
import threading

def login():
    # Get the username and password entered by the user
    username = username_entry.get()
    password = password_entry.get()

    # Check if the entered username and password are correct
    if username == "admin" and password == "password":
        messagebox.showinfo("Login Successful", f"Welcome, {username}!")
        open_main_gui()
    else:
        messagebox.showerror("Login Failed", "Invalid username or password")

def update_plot(canvas, ax, line, x, y):
    i = 0
    while True:
        x.append(i)
        y.append(psutil.cpu_percent())

        line.set_xdata(x)
        line.set_ydata(y)

        if i >= 50:
            ax.set_xlim(i - 50, i)

        ax.figure.canvas.draw()
        time.sleep(0.1)
        i += 1

def create_plot():
    fig = Figure(figsize=(5, 4), dpi=100)
    ax = fig.add_subplot(111)
    x, y = [], []
    line, = ax.plot(x, y, 'b-')

    ax.set_xlim(0, 50)
    ax.set_ylim(0, 100)

    return fig, ax, line, x, y

def open_main_gui():
    # Create a new window for the main GUI
    main_gui = tk.Toplevel(root)
    main_gui.title("Main GUI")

    # Styling the frames using ttk.Style
    s = ttk.Style()
    s.configure('userFrame.TFrame', background='#EDEAE4', relief='sunken')
    s.configure('angularVelocityFrame.TFrame', background='#F9F8F7', relief='sunken')
    s.configure('animationFrame.TFrame', background='#F9F8F7', relief='sunken')
    s.configure('graphFrame.TFrame', background='#F9F8F7', relief='sunken')
    s.configure('serialMonitorFrame.TFrame', background='#F9F8F7', relief='sunken')
    s.configure('yieldAngleFrame.TFrame', background='#F9F8F7', relief='sunken')

    # Create and configure frames with specified styles
    userFrame = ttk.Frame(main_gui, width=300, height=914, style='userFrame.TFrame')
    userFrame.grid(row=0, column=0, rowspan=2, sticky='NSWE')

    angularVelocityFrame = ttk.Frame(main_gui, width=500, height=447, style='angularVelocityFrame.TFrame')
    angularVelocityFrame.grid(row=0, column=1, sticky='NSEW')

    animationFrame = ttk.Frame(main_gui, width=500, height=447, style='animationFrame.TFrame')
    animationFrame.grid(row=0, column=2, sticky='NSWE')

    graphFrame = ttk.Frame(main_gui, width=500, height=447, style='graphFrame.TFrame')
    graphFrame.grid(row=1, column=2, sticky='NSEW')

    yieldAngleFrame = ttk.Frame(main_gui, width=500, height=447, style='yieldAngleFrame.TFrame')
    yieldAngleFrame.grid(row=1, column=1, sticky='NSEW')

    # Configure the grid to make frames resize properly
    main_gui.columnconfigure(0, weight=1)
    main_gui.columnconfigure(1, weight=2)
    main_gui.columnconfigure(2, weight=2)
    main_gui.rowconfigure(0, weight=1)
    main_gui.rowconfigure(1, weight=1)

    # Create a sub-frame in graphFrame to hold the Matplotlib canvas
    plot_frame = ttk.Frame(graphFrame, style='graphFrame.TFrame')
    plot_frame.pack(fill=tk.BOTH, expand=True)

    # Create and start the plot
    fig, ax, line, x, y = create_plot()
    canvas = FigureCanvasTkAgg(fig, master=plot_frame)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    # Start the thread to update the plot
    thread = threading.Thread(target=update_plot, args=(canvas, ax, line, x, y), daemon=True)
    thread.start()

# Create main window
root = tk.Tk()
root.title("Login")

# Username Label and Entry
username_label = tk.Label(root, text="Username:")
username_label.grid(row=0, column=0, padx=20, pady=20, sticky=tk.E)
username_entry = tk.Entry(root)
username_entry.grid(row=0, column=1, padx=20, pady=5)

# Password Label and Entry
password_label = tk.Label(root, text="Password:")
password_label.grid(row=1, column=0, padx=20, pady=20, sticky=tk.E)
password_entry = tk.Entry(root, show="*")
password_entry.grid(row=1, column=1, padx=20, pady=5)

# Login Button
login_button = tk.Button(root, text="Login", command=login)
login_button.grid(row=2, column=0, columnspan=2, pady=10)

# Run the main event loop
root.mainloop()
